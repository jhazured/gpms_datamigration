pipeline {
    agent any
    
    parameters {
        choice(
            name: 'stack_action',
            choices: [
                'init',
                'deploy-single-glue-job',
                'bulk-deploy-glue-job',
                'deploy-playbook',
                'delete-single-glue-job'
            ],
            description: 'Select the deployment action to perform'
        )
        choice(
            name: 'environment',
            choices: ['dev', 'test', 'uat', 'prod'],
            description: 'Target environment for deployment'
        )
        choice(
            name: 'etl_obj',
            choices: getEtlChoices(),
            description: 'Select ETL object (used for single deployments)'
        )
        string(
            name: 'custom_playbook',
            defaultValue: '',
            description: 'Custom playbook name for playbook deployments'
        )
        booleanParam(
            name: 'skip_tests',
            defaultValue: false,
            description: 'Skip running tests during deployment'
        )
    }
    
    environment {
        DOCKER_IMAGE = "gpms_deploy_prep"
        DOCKER_TAG = "${BUILD_NUMBER}"
        WORKSPACE_DIR = "${WORKSPACE}"
        ANSIBLE_CONFIG = "${WORKSPACE}/ansible/ansible.cfg"
        PYTHONPATH = "${WORKSPACE}"
    }
    
    stages {
        stage('Initialize') {
            steps {
                script {
                    echo "Starting GPMS Deployment Pipeline"
                    echo "Stack Action: ${params.stack_action}"
                    echo "Environment: ${params.environment}"
                    echo "Build Number: ${BUILD_NUMBER}"
                }
            }
        }
        
        stage('Clean Workspace & Checkout') {
            steps {
                cleanWs()
                checkout scm
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image for deployment preparation"
                    sh """
                        docker build -f docker/Dockerfile.ansible \
                            -t ${DOCKER_IMAGE}:${DOCKER_TAG} \
                            -t ${DOCKER_IMAGE}:latest .
                    """
                }
            }
        }
        
        stage('Run Tests') {
            when {
                not { params.skip_tests }
            }
            steps {
                script {
                    echo "Running ETL framework tests"
                    sh """
                        chmod +x scripts/run_pytest.sh
                        ./scripts/run_pytest.sh
                    """
                }
            }
        }
        
        stage('Deployment Preparation') {
            when {
                anyOf {
                    expression { params.stack_action == 'init' }
                    expression { params.stack_action == 'deploy-single-glue-job' }
                    expression { params.stack_action == 'bulk-deploy-glue-job' }
                    expression { params.stack_action == 'deploy-playbook' }
                }
            }
            steps {
                script {
                    runDeployPrep()
                }
            }
        }
        
        stage('Compile Python Wheels') {
            when {
                expression { params.stack_action == 'deploy-playbook' }
            }
            steps {
                script {
                    echo "Compiling Python wheels for playbook deployment"
                    sh """
                        mkdir -p wheels/custom
                        pip wheel -r requirements/${params.environment}.txt -w wheels/custom/
                    """
                }
            }
        }
        
        stage('Deploy Single Glue Job') {
            when {
                expression { params.stack_action == 'deploy-single-glue-job' }
            }
            steps {
                script {
                    echo "Deploying single ETL job: ${params.etl_obj}"
                    runPlaybook("deploy.yml", [
                        "etl_obj": params.etl_obj,
                        "environment": params.environment,
                        "action": "deploy"
                    ])
                }
            }
        }
        
        stage('Bulk Deploy Glue Jobs') {
            when {
                expression { params.stack_action == 'bulk-deploy-glue-job' }
            }
            steps {
                script {
                    echo "Bulk deploying all ETL jobs"
                    runPlaybook("deploy.yml", [
                        "environment": params.environment,
                        "action": "bulk_deploy"
                    ])
                }
            }
        }
        
        stage('Deploy Playbook') {
            when {
                expression { params.stack_action == 'deploy-playbook' }
            }
            steps {
                script {
                    def playbook = params.custom_playbook ?: "deploy.yml"
                    echo "Running custom playbook deployment: ${playbook}"
                    runPlaybook(playbook, [
                        "environment": params.environment,
                        "action": "playbook_deploy"
                    ])
                }
            }
        }
        
        stage('Delete Single Glue Job') {
            when {
                expression { params.stack_action == 'delete-single-glue-job' }
            }
            steps {
                script {
                    echo "Deleting ETL job: ${params.etl_obj}"
                    runPlaybook("deploy.yml", [
                        "etl_obj": params.etl_obj,
                        "environment": params.environment,
                        "action": "delete"
                    ])
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "Cleaning up Docker containers and images"
                sh """
                    # Stop and remove containers
                    docker ps -a -q --filter ancestor=${DOCKER_IMAGE}:${DOCKER_TAG} | xargs -r docker stop
                    docker ps -a -q --filter ancestor=${DOCKER_IMAGE}:${DOCKER_TAG} | xargs -r docker rm
                    
                    # Clean up build artifacts
                    docker system prune -f
                """
            }
            
            // Archive logs and artifacts
            archiveArtifacts artifacts: 'logs/**/*', allowEmptyArchive: true
            
            // Publish test results if they exist
            publishTestResults testResultsPattern: 'tests/reports/*.xml'
        }
        success {
            echo "GPMS Deployment Pipeline completed successfully!"
        }
        failure {
            echo "GPMS Deployment Pipeline failed. Check logs for details."
            // Send notification (email, Slack, etc.)
        }
    }
}

// Helper function to get ETL choices from groovy file
def getEtlChoices() {
    try {
        // Load ETL groups configuration
        def etlGroups = load "jenkins/etl_groups.groovy"
        
        // Extract ETL object names from the configuration
        if (etlGroups && etlGroups.etl_objects) {
            return etlGroups.etl_objects.collect { it.name }
        } else if (etlGroups && etlGroups.getEtlObjects) {
            return etlGroups.getEtlObjects()
        } else {
            // Fallback to scanning etls directory
            def etlFiles = []
            def etlDir = new File("etls")
            if (etlDir.exists()) {
                etlDir.listFiles().each { file ->
                    if (file.name.endsWith('.yaml.j2')) {
                        etlFiles.add(file.name.replace('.yaml.j2', ''))
                    }
                }
            }
            return etlFiles ?: ['customer_order_frequency', 'customer_sales_summary', 'product_inventory_report', 'product_sales_summary']
        }
    } catch (Exception e) {
        echo "Warning: Could not load ETL choices from groovy file: ${e.message}"
        // Fallback choices
        return [
            'customer_order_frequency',
            'customer_sales_summary', 
            'product_inventory_report',
            'product_sales_summary'
        ]
    }
}

// Helper function to run deployment preparation
def runDeployPrep() {
    echo "Running deployment preparation"
    sh """
        chmod +x scripts/deploy_etl.sh
        docker run --rm \
            -v ${WORKSPACE}:/workspace \
            -w /workspace \
            -e ENVIRONMENT=${params.environment} \
            ${DOCKER_IMAGE}:${DOCKER_TAG} \
            /workspace/scripts/deploy_etl.sh prep
    """
}

// Helper function to run Ansible playbooks
def runPlaybook(String playbook, Map extraVars = [:]) {
    echo "Running Ansible playbook: ${playbook}"
    
    def extraVarsString = ""
    if (extraVars) {
        def varsList = extraVars.collect { key, value -> "${key}=${value}" }
        extraVarsString = "--extra-vars \"${varsList.join(' ')}\""
    }
    
    sh """
        docker run --rm \
            -v ${WORKSPACE}:/workspace \
            -v ~/.aws:/root/.aws:ro \
            -w /workspace \
            -e ANSIBLE_CONFIG=/workspace/ansible/ansible.cfg \
            -e ENVIRONMENT=${params.environment} \
            ${DOCKER_IMAGE}:${DOCKER_TAG} \
            ansible-playbook \
                -i ansible/inventory/localhost.yml \
                ansible/playbooks/${playbook} \
                ${extraVarsString} \
                -v
    """
}

// Helper function to publish test results
def publishTestResults(String pattern) {
    if (fileExists(pattern)) {
        publishTestResults([
            $class: 'JUnitResultArchiver',
            testResultsPattern: pattern
        ])
    }
}